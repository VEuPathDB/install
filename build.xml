<project name="MAIN" default="install" basedir=".">

  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->
  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->
  <!-- Properties expected:                                                         -->
  <!--   proj            (project)                                                  -->
  <!--   vers            (version)                                                  -->
  <!--   comp            (component)                                                -->
  <!--   gusConfigFile                                                              -->
  <!--   projectsDir                                                                -->
  <!--   clean                                                                      -->
  <!--   installDBSchema                                                            -->
  <!--   append                                                                     -->
  <!--   webPropFile                                                                -->
  <!--   tag                                                                        -->
  <!--   installConfigFile  optional, installs $GUS_HOME/gus.config from sample     -->
  <!--   publishDocs        optional, installs documentation pages (webinstall only)-->
  <!--   projectsDir                                                                -->
  <!--   webAssets.optimize optional, runs web assets through an optimizer          -->
  <!--   webAssets.legacy   optional, generates web assets for legacy browsers      -->
  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->
  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->


  <!-- oooooooooooooooooooo Define additional resources oooooooooooooooooooo -->

  <property name="buildLogDir" value="${targetDir}/.buildlog" />
  <property environment="env"/>

  <import file="${projectsDir}/${proj}/build.xml" />


  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->
  <!-- oooooooooooooooooooooooooo  Main Targets ooooooooooooooooooooooooooo -->
  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->

  <target name="install" depends="InstallInit">

    <echo> Install </echo>
    <echo> proj=${proj} </echo>
    <echo> comp=${comp} </echo>

    <property name="initialTarget" value="install"/>

    <ant target="${proj}${comp}-Installation">
      <property name="project" value="${proj}"/>
    </ant>

    <antcall target="install-postprocess" />

    <echo message="Installation Complete"/>

  </target>


  <target name="webinstall" depends="WebInstallInit">

    <echo> Web Install </echo>
    <echo> proj=${proj} </echo>
    <echo> comp=${comp} </echo>

    <property name="initialTarget" value="webinstall"/>

    <antcall target="installYarnDepsForInstallProject"/>

    <ant target="${proj}${comp}-WebInstallation">
      <property name="project" value="${proj}"/>
    </ant>

    <antcall target="install-postprocess" />
    <antcall target="webinstall-postprocess" />

    <echo message="WebInstallation Complete"/>

  </target>


  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->
  <!-- oooooooooooooooooooooooooo  Initialization ooooooooooooooooooooooooo -->
  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->

  <target
    name="InstallInit"
    depends="validateTargetDir,validateClean, hasConfigFile, selfBuildInfo, installGusProjectPom, installConifer"/>

  <target
    name="WebInstallInit"
    depends="validateTargetDir,validateClean, hasConfigFile, selfBuildInfo, installGusProjectPom, installConifer"/>

  <target name="validateTargetDir">
    <fail unless="targetDir">
       Must provide -DtargetDir= property to specify where to build to
    </fail>

    <condition property="targetDirExists">
       <and>
         <available file="${targetDir}" />
         <isfalse value="${append}" />
       </and>
    </condition>

    <fail if="targetDirExists">
      Error: Target directory ${targetDir} already exists and you have not set the 'append' property to true
    </fail>
  </target>

  <target name="validateClean" if="clean" depends="checkEmptyComponent">
     <fail if="notEmptyComponent">
         Build Error:  Cannot use -clean when building a specific component.  Either build the entire ${proj} project or build ${proj}${comp} without using "clean"
     </fail>
     <echo message="inside validateClean, comp is ${comp} and clean is ${clean}"/>
  </target>

   <target name="checkEmptyComponent">
     <condition property="notEmptyComponent">
       <not>
         <equals arg1="${comp}" arg2=""/>
       </not>
     </condition>
   </target>

   <target name="deleteOldJars" if="clean">
     <delete>
       <fileset dir="${targetDir}/lib/java" includes="*.jar"/>
     </delete>
     <delete>
       <fileset dir="${targetDir}/lib/java/db_driver" includes="*.jar"/>
     </delete>
     <delete>
       <fileset dir="${targetDir}/lib/java/not-deployed" includes="*.jar"/>
     </delete>
     <delete>
       <fileset dir="${targetDir}/lib/java" includes="*.zip"/>
     </delete>
   </target>

  <target name="hasConfigFile" depends="optionInstallConfigFile">
   <condition property="noConfigFile">
       <not>
         <available file="${targetDir}/config/gus.config" />
       </not>
    </condition>

    <fail if="noConfigFile">
      Error: No gus.config file. Please run "mkdir -p ${targetDir}/config; cp ${projectsDir}/install/config/gus.config.sample ${targetDir}/config/gus.config" and edit ${targetDir}/config/gus.config as appropriate for your environment before try again.
    </fail>

  </target>

  <target name="optionInstallConfigFile" if="installConfigFile">
    <mkdir dir="${targetDir}/config"/>
    <copy file="${projectsDir}/install/config/gus.config.sample" tofile="${targetDir}/config/gus.config" overwrite="false" verbose="true" />
  </target>

  <target name="selfBuildInfo">
    <property name="project" value="install"/>
    <property name="component" value=""/>
    <antcall target="buildInfo" />
  </target>

  <target name="installGusProjectPom">
    <echo message="Installing fresh GUS project pom to local maven repository"/>
    <exec executable="rm">
      <arg line="-rf"/>
      <arg line="${mvnRepo}/org/gusdb/gus-project-pom"/>
    </exec>
    <ant target="mavenCleanInstall">
      <property name="relativeBuildDir" value="install"/>
    </ant>
  </target>

  <target name="installConifer">
    <exec dir="${projectsDir}/install/bin"
          executable="bash"
          failonerror="true"
          failifexecutionfails="true">
      <arg line="installConifer.sh"/>
      <arg line="${targetDir}"/>
      <arg line="${projectsDir}"/>
      <arg line="${proj}"/>
    </exec>
  </target>

  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->
  <!-- oooooooooooooooooooooooooo  SUBROUTINES  ooooooooooooooooooooooooooo -->
  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->


  <!-- oooooooooooooooooooo default project install ooooooooooooooooooooooo -->

  <target name="defaultProjectInstall">

    <concat destfile="${targetDir}/versions" append="yes">
      <fileset dir="${projectsDir}/${project}" >
         <include name="version"/>
      </fileset>
    </concat>

    <antcall target="installYarnDependencies">
      <param name="yarnCwd" value="${projectsDir}/${project}"/>
    </antcall>

    <antcall target="mavenBuildProject"/>

  </target>


  <!-- ooooooooooooooooooo default component install oooooooooooooooooooooo -->

  <target name="defaultComponentInstall">
    <property name="componentDir" value="${projectsDir}/${project}/${component}"/>

    <echo message="."/>
    <echo message="Installing ${project}/${component}"/>

    <available property="componentAvail" file="${projectsDir}/${project}/${component}"/>
    <fail unless="componentAvail">
       Component directory ${projectsDir}/${project}/${component} not found.
    </fail>

    <antcall target="componentPartCopy">
      <param name="part" value="bin"/>
      <param name="to" value="bin"/>
      <param name="prefix" value=""/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="lib/xml"/>
      <param name="to" value="lib/xml"/>
      <param name="prefix" value=""/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="lib/rng"/>
      <param name="to" value="lib/rng"/>
      <param name="prefix" value=""/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="lib/psql"/>
      <param name="to" value="lib/psql"/>
      <param name="prefix" value=""/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="lib/yaml"/>
      <param name="to" value="lib/yaml"/>
      <param name="prefix" value=""/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="lib/dst"/>
      <param name="to" value="lib/dst"/>
      <param name="prefix" value=""/>
    </antcall>

    <!-- TODO: remove once GUS project is moved to Maven -->
    <antcall target="componentPartCopy">
      <param name="part" value="lib/java"/>
      <param name="to" value="lib/java"/>
      <param name="prefix" value=""/>
    </antcall>
    <!-- End remove TODO -->

    <antcall target="componentPartCopy">
      <param name="part" value="ontology"/>
      <param name="to" value="ontology"/>
      <param name="prefix" value=""/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="lib/gbrowse"/>
      <param name="to" value="lib/gbrowse"/>
      <param name="prefix" value=""/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="lib/jbrowse"/>
      <param name="to" value="lib/jbrowse"/>
      <param name="prefix" value=""/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="lib/xsl"/>
      <param name="to" value="lib/xsl"/>
      <param name="prefix" value=""/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="lib/sql"/>
      <param name="to" value="lib/sql"/>
      <param name="prefix" value=""/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="lib/wdk"/>
      <param name="to" value="lib/wdk"/>
      <param name="prefix" value=""/>
    </antcall>

    <chmod perm="+x" maxparallel="20">
      <fileset dir="${targetDir}/bin"/>
    </chmod>

    <antcall target="componentPartCopy">
      <param name="part" value="lib/perl"/>
      <param name="to" value="lib/perl"/>
      <param name="prefix" value="${project}/${component}/"/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="lib/conifer"/>
      <param name="to" value="lib/conifer"/>
      <param name="prefix" value=""/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="lib/snakemake/workflows"/>
      <param name="to" value="lib/snakemake/workflows"/>
      <param name="prefix" value=""/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="lib/snakemake/config"/>
      <param name="to" value="lib/snakemake/config"/>
      <param name="prefix" value=""/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="lib/R"/>
      <param name="to" value="lib/R"/>
      <param name="prefix" value="${component}/"/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="plugin/perl"/>
      <param name="to" value="lib/perl"/>
      <param name="prefix" value="${project}/${component}/Plugin/"/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="plugin"/>
      <param name="to" value="lib"/>
      <param name="exclude" value="perl"/>
      <param name="prefix" value=""/>
    </antcall>

    <antcall target="defaultPythonLibrary"/>

    <antcall target="componentPartCopy">
      <param name="part" value="config"/>
      <param name="to" value="config"/>
      <param name="prefix" value=""/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="doc"/>
      <param name="to" value="doc"/>
      <param name="prefix" value="${project}/${component}/"/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="test"/>
      <param name="to" value="test"/>
      <param name="prefix" value="${project}/${component}/"/>
    </antcall>

   <antcall target="defaultCCompile"/>

   <!-- TODO: remove defaultJavaCompile once GUS project is moved to Maven -->
   <antcall target="defaultJavaCompile"/>   <!-- will run if non-maven -->
   <antcall target="mavenBuildComponent"/>  <!-- will run if manen -->

   <antcall target="componentPartCopy">
      <param name="part" value="data"/>
      <param name="to" value="data"/>
      <param name="prefix" value="${project}/${component}/"/>
    </antcall>

   <antcall target="componentPartCopy">
      <param name="part" value="metadata"/>
      <param name="to" value="metadata"/>
      <param name="prefix" value="${project}/${component}/"/>
    </antcall>

   <antcall target="componentPartCopy">
      <param name="part" value="lib/pipelines"/>
      <param name="to" value="lib/pipelines"/>
      <param name="prefix" value="${project}/${component}/"/>
    </antcall>

    <antcall target="buildInfo" />

  </target>


  <target name="checkHasPythonLib">
    <available property="hasPythonLib" file="${projectsDir}/${project}/${component}/lib/python"/>
  </target>

  <target name="defaultPythonLibrary" if="hasPythonLib" depends="checkHasPythonLib">
    <antcall target="componentPartCopy">
      <param name="part" value="lib/python"/>
      <param name="to" value="lib/python"/>
      <param name="prefix" value="${project}/${component}/"/>
    </antcall>
    <touch file="${targetDir}/lib/python/__init__.py"/>
    <touch file="${targetDir}/lib/python/${project}/__init__.py"/>
    <touch file="${targetDir}/lib/python/${project}/${component}/__init__.py"/>
  </target>

  <target name="checkHasCCode">
    <available property="hasCCode" file="${projectsDir}/${project}/${component}/src/c"/>
  </target>

  <target name="defaultCCompile" if="hasCCode"  depends="checkHasCCode">
    <apply executable="cc" dest="${targetDir}/bin" parallel="false" verbose="true" failonerror="true">
      <arg value="-o"/>
      <targetfile/>
      <srcfile/>
      <fileset dir="${projectsDir}/${project}/${component}/src/c" includes="*.c"/>
      <mapper type="glob" from="*.c" to="*"/>
    </apply>
  </target>


  <!-- oooooooooooooooooooo default web install ooooooooooooooooooooooooooo -->

  <target name="defaultWebComponentInstall">
    <property name="componentDir" value="${projectsDir}/${project}/${component}"/>

    <echo message="."/>
    <echo message="Installing web ${project}/${component}"/>

    <available property="componentAvail" file="${projectsDir}/${project}/${component}"/>
    <fail unless="componentAvail">
       Component directory ${projectsDir}/${project}/${component} not found.
    </fail>

    <antcall target="installYarnDependencies">
      <param name="yarnCwd" value="${projectsDir}/${project}/${component}"/>
    </antcall>

    <antcall target="bundleWithWebpack">
      <param name="webpackCwd" value="${projectsDir}/${project}/${component}"/>
    </antcall>

    <!-- if the file exists, it does not copy over -->
    <mkdir dir="${htdocsTargetDir}"/>
    <antcall target="webComponentPartCopy">
      <param name="part" value="htdocs"/>
      <param name="to" value="${htdocsTargetDir}"/>
    </antcall>

    <antcall target="webComponentPartCopy">
      <param name="part" value="html"/>
      <param name="to" value="${htdocsTargetDir}"/>
    </antcall>

    <mkdir dir="${cgibinTargetDir}"/>
    <antcall target="webComponentPartCopy">
      <param name="part" value="cgi-bin"/>
      <param name="to" value="${cgibinTargetDir}"/>
    </antcall>

    <mkdir dir="${cgilibTargetDir}"/>
    <antcall target="webComponentPartCopy">
      <param name="part" value="cgi-lib"/>
      <param name="to" value="${cgilibTargetDir}"/>
    </antcall>

    <mkdir dir="${confTargetDir}"/>
    <antcall target="webComponentPartCopy">
      <param name="part" value="conf"/>
      <param name="to" value="${confTargetDir}"/>
    </antcall>

    <mkdir dir="${webappTargetDir}"/>
    <antcall target="webComponentPartCopy">
      <param name="part" value="webapp"/>
      <param name="to" value="${webappTargetDir}"/>
    </antcall>

    <antcall target="buildInfo" />

  </target>

  <!-- oooooooooooooooooo Yarn Installation ooooooooooooooooooooo -->

  <target name="installYarnBin" depends="yarnBinCheck" unless="hasYarnBin">
    <!-- unpack yarn tgz into targetDirectory -->
    <echo message="Installing yarn binary"/>
    <mkdir dir="${targetDir}/lib/yarn"/>
    <mkdir dir="${targetDir}/bin"/>
    <exec executable="tar"
          dir="${targetDir}/lib/yarn"
          failonerror="true"
          failifexecutionfails="true">
      <arg line="xzf ${projectsDir}/install/lib/yarn.tar.gz --strip-components 1"/>
    </exec>
  </target>

  <target name="yarnBinCheck">
    <available property="hasYarnBin" file="${targetDir}/bin/yarn"/>
  </target>

  <target name="installYarnDepsForInstallProject" depends="installYarnBin">
    <echo>Installing yarn deps</echo>
    <exec executable="yarn"
          dir="${projectsDir}/install"
          failonerror="true"
          failifexecutionfails="true">
      <arg line="--ignore-engines"/>
    </exec>
  </target>

  <!-- If package.json, call yarn -->
  <target name="checkIfYarnComponent">
    <echo message="yarnCwd: ${yarnCwd}"/>
    <available property="isYarnComponent" file="${yarnCwd}/package.json"/>
  </target>

  <target name="installYarnDependencies" if="isYarnComponent" depends="checkIfYarnComponent">
    <antcall target="installYarnBin"/>
    <echo message="Installing node dependencies with yarn"/>
    <exec executable="yarn"
      dir="${yarnCwd}"
      failonerror="true"
      failifexecutionfails="true">
      <arg line="--ignore-engines"/>
    </exec>
  </target>

  <!-- If webpack.config.js, call webpack -->
  <target name="checkIfWebpackComponent">
    <available property="isWebpackComponent" file="${webpackCwd}/webpack.config.js"/>
  </target>

  <target name="bundleWithWebpack" if="isWebpackComponent" depends="checkIfWebpackComponent">
    <echo message="Bundling assets with webpack"/>
    <echo message="cwd: ${webpackCwd}"/>

    <delete dir="${webpackCwd}/dist"/>

    <antcall target="webpack">
      <param name="browserslistEnv" value="modern"/>
    </antcall>

    <antcall target="webpack">
      <param name="browserslistEnv" value="legacy"/>
    </antcall>

    <delete dir="${webappTargetDir}/bundles"/>

    <copy todir="${webappTargetDir}/bundles">
      <fileset dir="${webpackCwd}/dist" />
    </copy>

  </target>

  <target name="checkWebpackEnv">
    <condition property="webpack.run" value="true" else="false">
      <or>
        <equals arg1="${browserslistEnv}" arg2="modern"/>
        <istrue value="${webAssets.legacy}"/>
      </or>
    </condition>
  </target>

  <target name="webpack" depends="checkWebpackEnv" if="${webpack.run}">
    <condition property="webpack.env" value="--mode=production" else="--mode=development">
      <istrue value="${webAssets.optimize}"/>
    </condition>
    <exec executable="${webpackCwd}/node_modules/.bin/webpack"
      dir="${webpackCwd}"
      failonerror="true"
      failifexecutionfails="true">
      <env key="BROWSERSLIST_ENV" value="${browserslistEnv}"/>
      <arg line="${webpack.env}"/>
    </exec>
  </target>

  <!-- oooooooooooooooooo Documentation Generation ooooooooooooooooooooo -->

  <!-- raml2html is installed in the install project (see install/package.json). -->
  <!-- It is then called via yarn (e.g., `yarn raml2html -i ... -o ...`). -->
  <target name="runRaml2Html" depends="installYarnBin,installYarnDepsForInstallProject">
    <echo>Generating RAML HTML doc</echo>
    <echo>  Input:  ${inputFile}</echo>
    <echo>  Output: ${outputFile}</echo>
    <mkdir dir="${htdocsTargetDir}"/>
    <exec executable="yarn"
          dir="${projectsDir}/install"
          failonerror="true"
          failifexecutionfails="true">
      <arg line="raml2html"/>
      <arg line="--theme raml2html-plain-theme"/>
      <arg line="-i ${inputFile}"/>
      <arg line="-o ${outputFile}"/>
    </exec>
  </target>

  <!-- For now can only build docs for maven projects -->
  <target name="generateDocs" if="publishDocs">
    <echo>Generating Documentation for ${project}</echo>
    <!-- Javadoc is currently unavailable on VEuPathDB servers; uncomment when available
    <exec dir="${projectsDir}/${relativeBuildDir}"
          executable="mvn"
          failonerror="true"
          failifexecutionfails="true">
      <arg line="javadoc:javadoc"/>
      <arg line="- -quiet"/>
      <arg line="-Dmaven.repo.local=${mvnRepo}"/>
    </exec>
    -->
  </target>

  <target name="checkWebInstall">
    <condition property="isWebInstall">
      <equals arg1="${initialTarget}" arg2="webinstall"/>
    </condition>
  </target>

  <target name="checkWebInstallAndPublish" depends="checkWebInstall">
    <condition property="isWebInstallAndPublish">
      <and>
        <isset property="isWebInstall"/>
        <isset property="publishDocs"/>
      </and>
    </condition>
  </target>

  <target name="publishDocs" depends="checkWebInstallAndPublish" if="isWebInstallAndPublish">
    <echo>Publishing Documentation for ${relativeBuildDir}</echo>
    <copy todir="${htdocsTargetDir}/docs/${relativeBuildDir}" failonerror="false">
      <fileset dir="${projectsDir}/${relativeBuildDir}/target/site" includes="**"/>
    </copy>
  </target>

  <!-- ooooooooooooooooooo Java build targets ooooooooooooooooooooooo -->

  <target name="mavenCleanInstall">
    <exec dir="${projectsDir}/${relativeBuildDir}"
           executable="mvn"
           failonerror="true"
           failifexecutionfails="true">
       <arg line="--settings"/>
       <arg line="${projectsDir}/install/settings.xml"/>
       <arg line="clean"/>
       <arg line="install"/>
       <arg line="--quiet"/>
       <arg line="-Dmaven.test.skip=true"/>
       <arg line="-Dmaven.repo.local=${mvnRepo}"/>
    </exec>
  </target>

  <target name="checkIfMavenProject">
    <available property="isMavenProject" file="${projectsDir}/${project}/pom.xml"/>
  </target>

  <target name="checkIfMavenComponent">
    <available property="isMavenComponent" file="${projectsDir}/${project}/${component}/pom.xml"/>
  </target>

  <target name="mavenBuildProject" if="isMavenProject" depends="checkIfMavenProject">
    <echo>Building Maven Project: ${project}</echo>
    <!-- build the project with maven -->
    <ant target="mavenCleanInstall">
      <property name="relativeBuildDir" value="${project}"/>
    </ant>
    <ant target="generateDocs">
      <property name="relativeBuildDir" value="${project}"/>
    </ant>
    <ant target="publishDocs">
      <property name="relativeBuildDir" value="${project}"/>
    </ant>
    <!-- deploy generated artifacts -->
    <mkdir dir="${targetDir}/lib/java"/>
    <exec dir="${projectsDir}/${project}"
          executable="bash"
          failonerror="false"
          failifexecutionfails="true">
      <arg line="-c"/>
      <arg line="'cp */target/*.jar ${targetDir}/lib/java'"/>
    </exec>
    <!-- deploy dependencies -->
    <ant target="deployMavenDependencies">
      <property name="relativeBuildDir" value="${project}"/>
    </ant>
  </target>

  <target name="mavenBuildComponent" if="isMavenComponent" depends="checkIfMavenComponent">
    <ant target="subMavenBuildComponent"/>
  </target>

  <target name="subMavenBuildComponent" if="notEmptyComponent">
    <echo>Building Maven Component: ${project}/${component}</echo>
    <!-- should only build component specifically requested (components are build automatically at the project level) -->
    <ant target="mavenCleanInstall">
      <property name="relativeBuildDir" value="${project}/${component}"/>
    </ant>
    <!-- deploy generated artifacts -->
    <mkdir dir="${targetDir}/lib/java"/>
    <copy todir="${targetDir}/lib/java" flatten="true">
      <fileset dir="${projectsDir}/${project}/${component}/target" >
        <include name="*.jar"/>
      </fileset>
    </copy>
    <!-- deploy dependencies -->
    <ant target="deployMavenDependencies">
      <property name="relativeBuildDir" value="${project}/${component}"/>
    </ant>
  </target>

  <target name="deployMavenDependencies">
    <exec dir="${projectsDir}/${relativeBuildDir}"
           executable="mvn"
           failonerror="true"
           failifexecutionfails="true">
       <arg line="dependency:copy-dependencies"/>
       <arg line="-Dmaven.repo.local=${mvnRepo}"/>
       <arg line="-DoutputDirectory=${targetDir}/lib/java"/>
       <arg line="--quiet"/>
    </exec>
  </target>

  <!-- TODO: Remove all the following targets once GUS project is moved to Maven;
       They are all to support non-Maven Java compilation and deployment to gus_home -->
  <target name="defaultJavaCompile" if="isNonMavenJava" depends="deleteMyClasses,checkNonMavenJava">
     <echo message="Java source found in non-maven component.  Building traditional way..."/>
     <mkdir dir="${projectsDir}/${project}/${component}/classes"/>
     <mkdir dir="${targetDir}/lib/java"/>
     <mkdir dir="${targetDir}/lib/java/db_driver"/>
     <mkdir dir="${targetDir}/lib/java/not-deployed"/>
     <javac srcdir="${projectsDir}/${project}/${component}/src/java"
            destdir="${projectsDir}/${project}/${component}/classes"
        includeAntRuntime="false"
        fork="true"
        debug="on"
        tempdir="${projectsDir}/${project}/${component}/classes"
        memoryMaximumSize="256m">
        <classpath>
           <fileset dir="${targetDir}/lib/java/">
              <include name="*.jar"/>
           </fileset>
           <fileset dir="${targetDir}/lib/java/db_driver">
              <include name="*.jar"/>
           </fileset>
           <fileset dir="${targetDir}/lib/java/db_driver">
              <include name="*.zip"/>
           </fileset>
           <fileset dir="${targetDir}/lib/java/not-deployed">
              <include name="*.jar"/>
           </fileset>
        </classpath>
     </javac>

     <!-- copy over resource files -->
     <antcall target="compileResources" />

     <copy todir="${projectsDir}/${project}/${component}/classes/META-INF">
       <fileset dir="${componentDir}" >
         <include name="META-INF/**"/>
       </fileset>
     </copy>

     <jar basedir="${projectsDir}/${project}/${component}/classes"
          destfile="${targetDir}/lib/java/${project}-${component}.jar"/>
  </target>

  <target name="compileResources" if="hasResources" depends="checkIfHaveResources">
    <copy todir="${projectsDir}/${project}/${component}/classes/">
      <fileset dir="${projectsDir}/${project}/${component}/src/resources" />
    </copy>
  </target>

  <target name="checkIfHaveResources">
    <available property="hasResources" file="${projectsDir}/${project}/${component}/src/resources"/>
  </target>

  <target name="checkNonMavenJava" depends="checkIfMavenComponent,checkIfHaveJava">
    <condition property="isNonMavenJava">
      <and>
        <not>
          <isset property="isMavenComponent"/>
        </not>
        <isset property="hasJava"/>
      </and>
    </condition>
  </target>

  <target name="checkIfHaveJava">
    <available property="hasJava" file="${projectsDir}/${project}/${component}/src/java"/>
  </target>

  <target name="checkIfCleanAndHaveJava" depends="checkIfHaveJava">
    <condition property="cleanAndHasJava">
      <and>
        <isset property="hasJava"/>
        <isset property="clean"/>
      </and>
    </condition>
  </target>

  <target name="deleteMyClasses" if="cleanAndHasJava"
          depends="checkIfCleanAndHaveJava">
    <delete>
      <fileset dir="${projectsDir}/${project}/${component}/classes"/>
    </delete>
    <delete file="${targetDir}/lib/java/${project}-${component}.jar"/>
    <echo message="deleted all old classes, clean is ${clean} and has java is ${hasJava}"/>
  </target>
  <!-- End Remove TODO -->

  <!-- oooooooooooooooooooo utility subroutines  ooooooooooooooooooooooo -->

  <target name="symlink">
    <echo message="Creating symbolic link to ${resource} at ${link}"/>
    <exec executable="relativeSymLink">
      <arg line="${resource}"/>
    	<arg line="${link}"/>
    </exec>
  </target>

  <target name="componentPartCopy">
    <available property="partAvailable" file="${componentDir}/${part}"/>
    <antcall target="componentPartCopySub"/>
  </target>

  <target name="componentPartCopySub" if="partAvailable">
    <mkdir dir="${targetDir}/${to}/${prefix}"/>

    <copy todir="${targetDir}/${to}/${prefix}">
      <fileset dir="${componentDir}/${part}" >
        <include name="**"/>
        <exclude name="**/CVS/*" />
        <exclude name="${exclude}/" />
      </fileset>
    </copy>
  </target>

  <target name="webComponentPartCopy">
    <available property="partAvailable" file="${componentDir}/${part}"/>
    <antcall target="webComponentPartCopySub"/>
  </target>

  <target name="webComponentPartCopySub" if="partAvailable">
    <mkdir dir="${to}"/>

    <copy todir="${to}">
      <fileset dir="${componentDir}/${part}" >
        <include name="**"/>
        <exclude name="**/CVS/*" />
        <exclude name="${exclude}/" />
      </fileset>
    </copy>
  </target>

  <target name="configFile">
    <property name="cFile" value="${cFileSrcDir}/${cFileName}"/>
    <property name="cFileTarget" value="${targetDir}/config/${cFileName}"/>

    <copy file="${cFile}" toDir="${targetDir}/config"/>

    <available file="${cFileTarget}" property="cFileTargetExists"/>

    <fail unless="cFileTargetExists">
      Error: You must configure the file ${cFileTarget}.  To create it, copy ${cFileTarget}.sample to ${cFileTarget} and edit ${cFileTarget}, giving it the proper values for your installation.
    </fail>
  </target>


  <!-- oooooooooooooooooooo Main Target Post-Processing  ooooooooooooooooooooooo -->

  <target name="install-postprocess">
    <ant target="replaceLocationRefs">
      <property name="binLocation" value="${targetDir}/bin"/>
    </ant>
  </target>

  <target name="webinstall-postprocess">
    <!-- check existence of cgi-bin and populate macros in files there if present -->
    <available file="${cgibinTargetDir}" type="dir" property="cgibinTargetDir.present"/>
    <antcall target="webinstall-cgi-bin-postprocess" />
  </target>

  <target name="webinstall-cgi-bin-postprocess" if="cgibinTargetDir.present">
    <ant target="replaceLocationRefs">
      <property name="binLocation" value="${cgibinTargetDir}"/>
    </ant>
  </target>

  <target name="replaceLocationRefs">

    <replace dir="${binLocation}"
             propertyFile="${targetDir}/config/gus.config" >
      <include name="**/*" />
      <replacefilter token="@perl@" property="perl"/>
    </replace>

    <ant target="install-bin-location-refs">
      <property name="binLocation" value="${binLocation}"/>
    </ant>

    <!-- because the replace task clobbers permissions.  see ant bug #5661 -->
    <chmod perm="a+x" maxparallel="20">
      <fileset dir="${binLocation}"/>
    </chmod>

  </target>

  <!-- might not know the values for these until deployment time, so conditionally fill -->
  <target name="install-bin-location-refs" unless="skipBinFileLocationMacros">
    <echo message="Filling macros in files in ${binLocation}"/>
    <replace dir="${binLocation}">
      <include name="**/*" />
      <replacefilter token="@targetDir@" value="${targetDir}" />
      <replacefilter token="@cgilibTargetDir@" value="${cgilibTargetDir}" />
    </replace>
  </target>


  <!-- oooooooooooooooooooo Build Logging Subroutines  ooooooooooooooooooooooo -->

  <target name="buildInfo" depends="recordBuildState" />

  <target name="recordBuildState">
    <mkdir dir="${buildLogDir}" />

    <tstamp>
      <format property="tstamp" pattern="yyyy/MM/dd HH:mm:ss"/>
    </tstamp>

    <propertyfile comment="Build Information"
                  file="${buildLogDir}/gus-build-state.log">
      <entry key="!Last.build.initialTarget"
             value="${initialTarget}"/>
      <entry key="!Last.build.component"
             value="${proj}${comp}"/>
      <entry key="!Last.build.timestamp"
             value="${tstamp}"/>
      <entry key="!Last.build"
             value="${proj}${comp} @ ${tstamp}"/>
      <entry key="${project}.${component}.buildtime"
             type="date"
             pattern="yyyy/MM/dd HH:mm:ss"
             value="now"/>
    </propertyfile>

    <exec dir="${projectsDir}/install/bin"
          executable="sh"
          failonerror="false"
          failifexecutionfails="false">
      <arg line="logGitStatus"/>
      <arg line="${projectsDir}/${project}/${component}"/>
    </exec>
  </target>


  <!-- oooooooooooooooooooo Oracle-related Subroutines  ooooooooooooooooooooooo -->

  <target name="installOracleDriver">
    <!-- set values for supported Oracle driver -->
    <!-- IMPORTANT CAUTION:  if you update the ojdbc driver here,
         do so in all other build.xml files that import the driver,
         to prevent conflicts in gus_home -->

    <!-- install v11/ojdbc6 first so that if v12/ojdbc8 is available v11 will be deleted -->
    <ant target="handleOracleDriverVersion">
      <property name="oracle.driver.name" value="ojdbc6"/>
      <property name="oracle.version" value="11.2.0.4"/>
    </ant>

    <ant target="handleOracleDriverVersion">
      <property name="oracle.driver.name" value="ojdbc8"/>
      <property name="oracle.version" value="12.2.0.1"/>
    </ant>
  </target>

  <target name="handleOracleDriverVersion">

    <!-- check existence of Oracle  -->
    <property environment="env"/>
    <condition property="oracle.home.defined">
      <isset property="env.ORACLE_HOME"/>
    </condition>
    <condition property="oracle.home.present">
      <available file="${env.ORACLE_HOME}" type="dir"/>
    </condition>
    <condition property="ojdbc.present">
      <available file="${env.ORACLE_HOME}/jdbc/lib/${oracle.driver.name}.jar" type="file"/>
    </condition>

    <!-- set values to false if not already set to true -->
    <property name="oracle.home.present" value="false"/>
    <property name="ojdbc.present" value="false"/>

    <!-- build out specific conditions -->
    <condition property="oracle.home.complete">
      <and>
        <isset property="oracle.home.defined"/>
        <istrue value="${oracle.home.present}"/>
        <istrue value="${ojdbc.present}"/>
      </and>
    </condition>
    <condition property="oracle.home.incomplete">
      <and>
        <isset property="oracle.home.defined"/>
        <or>
          <isfalse value="${oracle.home.present}"/>
          <isfalse value="${ojdbc.present}"/>
        </or>
      </and>
    </condition>

    <!-- perform conditional operations -->
    <antcall target="warnAboutOracleDriver"/>
    <antcall target="copyLocalOracleDriver"/>
    <!-- temporarily don't fail here
    <fail if="oracle.home.incomplete" message="Error: if $ORACLE_HOME is defined, file $ORACLE_HOME/jdbc/lib/${oracle.driver.name}.jar must be available."/>
    -->

  </target>

  <target name="warnAboutOracleDriver" unless="oracle.home.defined">
    <echo>
      IMPORTANT REMINDER: Environment variable $ORACLE_HOME does not appear to be set.  If you are using Oracle, you
               must manually install the Oracle JDBC driver (${oracle.driver.name}.jar) into $GUS_HOME/lib/java/db_driver
               and (optionally) into your local Maven repository.
    </echo>
  </target>

  <target name="copyLocalOracleDriver" if="oracle.home.complete">
    <echo>Removing old versions of Oracle driver from GUS_HOME</echo>
    <delete failonerror="false">
      <fileset dir="${targetDir}/lib/java/db_driver" includes="ojdbc*.jar"/>
    </delete>
    <echo>Installing local ${oracle.driver.name}.jar from ${env.ORACLE_HOME}/jdbc/lib/${oracle.driver.name}.jar</echo>
    <copy file="${env.ORACLE_HOME}/jdbc/lib/${oracle.driver.name}.jar"
          toDir="${targetDir}/lib/java/db_driver"
          overwrite="true"/>
    <echo>Installing local ${oracle.driver.name}.jar into local Maven repository</echo>
    <exec dir="${projectsDir}/${project}"
          executable="mvn"
          failonerror="true"
          failifexecutionfails="true">
      <arg line="install:install-file"/>
      <arg line="-Dmaven.repo.local=${mvnRepo}"/>
      <arg line="-DgroupId=com.oracle"/>
      <arg line="-DartifactId=${oracle.driver.name}"/>
      <arg line="-Dversion=${oracle.version}"/>
      <arg line="-Dpackaging=jar"/>
      <arg line="-Dfile=${env.ORACLE_HOME}/jdbc/lib/${oracle.driver.name}.jar"/>
      <arg line="-DgeneratePom=true"/>
      <arg line="--quiet"/>
    </exec>
  </target>

</project>


